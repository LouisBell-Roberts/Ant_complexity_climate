theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16, colour = "#1abc9c"),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Both") +
geom_signif(xmin = as.integer(1),
xmax = as.integer(2),
y_position = 260,
annotation = "*",
tip_length = 0.05,
textsize = 5.5,
colour = "black")
)
(both_caste_PRE_col <- both_caste_PRE + theme(
plot.title = element_text(hjust = 0.5, size = 16, colour = "black"),
plot.background = element_rect(fill = faded_green, colour = 'white')
))
# ggsave("/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Presentations/TEEB/2nd_TEEB_talk/Photos/both_caste_PRE.pdf", plot = both_caste, width = 6, height = 4, dpi = 300)
grid.arrange(global_CS, tropical_CS, temperate_CS, both_CS, global_caste, tropical_caste, temperate_caste, both_caste, ncol = 2, nrow = 4)
PRE_Caste_panel_equal_reg.pdf <- grid.arrange(global_caste_PRE, tropical_caste_PRE, temperate_caste_PRE, both_caste_PRE, ncol = 2)
# ggsave(filename = "/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Figures/PRE_Caste_panel_equal_reg.pdf", plot = PRE_Caste_panel_equal_reg.pdf, width = 10, height = 5, dpi = 300)
PRE_panel_reg.pdf <- grid.arrange(global_CS_reg, tropical_CS_reg, temperate_CS_reg, both_CS_reg, global_caste, tropical_caste, temperate_caste, both_caste, ncol = 2, nrow = 4)
# Create a grid of the three smaller plots on the right
PRE_small_plots_grid <- grid.arrange(tropical_CS_reg, temperate_CS_reg, both_CS_reg, ncol = 1)
# Arrange the larger plot and the small plots side by side
PRE_CS_panel_reg.pdf <- grid.arrange(global_CS_reg, PRE_small_plots_grid, ncol = 2, widths = c(2, 1))
PRE_CS_panel_reg.pdf
#Four equally size panels
PRE_CS_panel_equal_reg.pdf <- grid.arrange(global_CS_reg, tropical_CS_reg, temperate_CS_reg, both_CS_reg, ncol = 2)
# ggsave(filename = "/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Figures/PRE_CS_panel_equal_reg.pdf", plot = PRE_CS_panel_equal_reg.pdf, width = 10, height = 6, dpi = 300)
# PRE_panel_reg.pdf
#
# ggsave("/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Version_1/Figures/PRE_panel_reg.pdf", plot = PRE_panel_reg.pdf, width = 9, height = 6, dpi = 300)
grid.arrange(global_CS_reg_trans, tropical_CS_reg, temperate_CS_reg_trans, both_CS_reg_trans, global_caste_trans, tropical_caste, temperate_caste_trans, both_caste_trans, ncol = 2, nrow = 4)
#Assign poly_id as a factor
ant_data_global$poly_id <- as.factor(ant_data_global$poly_id)
#Calculate mean DTR for each factor level
global_means <- aggregate(DTRavg_avg ~ poly_id, data = ant_data_global, FUN = mean) #0 = 11.3, 1 = 11.4
#Global data
global_caste_DTR <- ggplot(ant_data_global, aes(x = poly_id, y = DTRavg_avg, fill = poly_id)) +
geom_violin(fill = "orange", color = "black") +
labs(title = "", x = "", y = "DTR") +
theme_classic(base_size = 13) +
annotate("segment", x = 0.9, xend = 1.1, y = 11.3, yend = 11.3,
color = "black", size = 0.7) +
annotate("text", x = 1, y = 11.3, label = "11.3",
color = "black", vjust = -0.3) +
annotate("segment", x = 1.9, xend = 2.1, y = 11.4, yend = 11.4,
color = "black", size = 0.7) +
annotate("text", x = 2, y = 11.4, label = "11.4",
color = "black", vjust = -0.3) +
scale_y_continuous(labels = comma_format(), expand = c(0.15, 2), ) +
scale_fill_manual(values = c("white", "white")) +
guides(fill = "none") +
scale_x_discrete(labels = c("Low variation", "High variation")) +  # Set custom x-axis labels
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16)
) +
ggtitle("Global")
global_caste_DTR
#Assign poly_id as a factor
ant_data_global$poly_id <- as.factor(ant_data_global$poly_id)
#Calculate mean TMP for each factor level
global_means_TMP <- aggregate(TMPavg_avg ~ poly_id, data = ant_data_global, FUN = mean) #0 = 18.70371, 1 = 19.26376
#Global data
#Plot without transformation
global_caste_TMP <- ggplot(ant_data_global, aes(x = poly_id, y = TMPavg_avg, fill = poly_id)) +
geom_violin(fill = "red", color = "black") +
labs(title = "", x = "", y = "Temperature") +
theme_classic() +
annotate("segment", x = 0.9, xend = 1.1, y = 18.7, yend = 18.7,
color = "black", size = 0.7) +
annotate("text", x = 1, y = 18.7, label = "18.7",
color = "black", vjust = -0.3) +
annotate("segment", x = 1.9, xend = 2.1, y = 19.3, yend = 19.3,
color = "black", size = 0.7) +
annotate("text", x = 2, y = 19.3, label = "19.3",
color = "black", vjust = -0.3) +
scale_y_continuous(labels = comma_format(), expand = c(0.15, 2), ) +
scale_fill_manual(values = c("white", "white")) +
guides(fill = "none") +
scale_x_discrete(labels = c("Low variation", "High variation")) +  # Set custom x-axis labels
theme(
axis.text.x = element_text(size = 12, colour = "black"),
axis.text.y = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black"),
axis.title.y = element_text(size = 12, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16)
) +
ggtitle("Global")
#Axes flipped
(global_caste_TMP <- ggplot(ant_data_global, aes(x = TMPavg_avg, y = poly_id, color = poly_id)) +
geom_point(position = position_jitterdodge(jitter.width = 0.5), size = 1.4, shape = 16, alpha = 0.3) +
labs(title = "", x = expression("Temperature (" * degree*C * ")"), y = "") +
theme_classic() +
annotate("segment", x = 18.7, xend = 18.7, y = 0.8, yend = 1.2,
color = "black", size = 0.7) +
annotate("text", x = 18.7, y = 1, label = "",
color = "black", hjust = -0.3) +
annotate("segment", x = 19.3, xend = 19.3, y = 1.8, yend = 2.2,
color = "black", size = 0.7) +
annotate("text", x = 19.3, y = 2, label = "",
color = "black", hjust = -0.3) +
scale_x_continuous(labels = scales::comma_format(), expand = c(0.15, 0)) +
guides(colour = "none") +
scale_y_discrete(labels = c("Low variation", "High variation")) +
scale_colour_manual(values = c("#C3E6F9", "#000025")) +  # Add your desired colors here
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Global") +
geom_signif(xmin = as.integer(1),
xmax = as.integer(2),
y_position = 31,
annotation = "*",
tip_length = 0.05,
textsize = 5.5,
colour = "black"))
###
#Logistic regression plot
###
ant_data_global$poly_id <- as.numeric(as.character(ant_data_global$poly_id))
#Run MCMCglmm regression model
MCMC_global_data <- ant_data_global %>% dplyr::rename(animal = valid_species_name)
prior1.1 <- list(G = list(G1 = list(V = 1, nu = 1000, alpha.mu = 0, alpha.V = 1)),
R = list(V = 1, fix = 1))
model_global_caste_TMP <- MCMCglmm(poly_id ~ TMPavg_avg, random = ~animal, family = "categorical", prior = prior1.1, pedigree = tree_set[[1]], data = MCMC_global_data, nitt = 110000, burnin = 10000, thin = 100, verbose = F)
summary(model_global_caste_TMP)
#predict
MCMC_global_data$predicted_poly_TMP <- predict(model_global_caste_TMP, newdata = MCMC_global_data, type = "response")
MCMC_data_selected <- MCMC_global_data %>% dplyr::select(TMPavg_avg, predicted_poly_TMP, poly_id)
#Plot
(global_caste_TMP <- ggplot(MCMC_data_selected, aes(x = TMPavg_avg, y = poly_id, color = poly_id)) +
geom_point(size = 1.4, shape = 16, alpha = 0.3) +
labs(title = "", x = expression("Temperature (" * degree*C * ")"), y = "") +
theme_classic() +
scale_x_continuous(labels = scales::comma_format(), expand = c(0.05, 0)) +
scale_y_continuous(breaks = c(0,1), labels = c("Monomorphic", "Polymorphic")) +  # Set labels for y-axis
guides(colour = "none") +
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16, colour = "black"),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
geom_line(aes(y = predicted_poly_TMP), size = 0.8, color = "black") +
ggtitle("Global")
)
#Calculate mean TMP for each factor level
Tropical_means_TMP <- aggregate(TMPavg_avg ~ poly_id, data = ant_data_tropical, FUN = mean) #0 = 24.35807, 1 = 24.92563
#Both data - without transformation
tropical_caste_TMP <- ggplot(ant_data_tropical, aes(x = poly_id, y = TMPavg_avg, fill = poly_id)) +
geom_violin(fill = "red", color = "black") +
labs(title = "", x = "", y = "Temperature") +
theme_classic() +
annotate("segment", x = 0.9, xend = 1.1, y = 24.4, yend = 24.4,
color = "black", size = 0.7) +
annotate("text", x = 1, y = 24.4, label = "24.4",
color = "black", vjust = -0.3) +
annotate("segment", x = 1.9, xend = 2.1, y = 24.9, yend = 24.9,
color = "black", size = 0.7) +
annotate("text", x = 2, y = 24.9, label = "24.9",
color = "black", vjust = -0.3) +
scale_y_continuous(labels = comma_format(), expand = c(0.15, 0)) +
scale_fill_manual(values = c("white", "white")) +
guides(fill = "none") +
scale_x_discrete(labels = c("Low variation", "High variation")) +  # Set custom x-axis labels
theme(
axis.text.x = element_text(size = 12, colour = "black"),
axis.text.y = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black"),
axis.title.y = element_text(size = 12, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Tropical")
#Axes flipped
(tropical_caste_TMP <- ggplot(ant_data_tropical, aes(x = TMPavg_avg, y = poly_id, color = poly_id)) +
geom_point(position = position_jitterdodge(jitter.width = 0.5), size = 1.4, shape = 16, alpha = 0.3) +
labs(title = "", x = expression("Temperature (" * degree*C * ")"), y = "") +
theme_classic() +
annotate("segment", x = 24.4, xend = 24.4, y = 0.8, yend = 1.2,
color = "black", size = 0.7) +
annotate("text", x = 24.4, y = 1, label = "",
color = "black", hjust = -0.3) +
annotate("segment", x = 24.9, xend = 24.9, y = 1.8, yend = 2.2,
color = "black", size = 0.7) +
annotate("text", x = 24.9, y = 2, label = "",
color = "black", hjust = -0.3) +
scale_x_continuous(labels = scales::comma_format(), expand = c(0.15, 0), limits = c(0, 30)) +  # Adjust the limits
guides(colour = "none") +
scale_y_discrete(labels = c("Low variation", "High variation")) +
scale_colour_manual(values = c("#C3E6F9", "#000025")) +  # Add your desired colors here
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16, colour = "#FF6600"),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Tropical")
)
(tropical_caste_TMP_col <- tropical_caste_TMP + theme(
plot.title = element_text(hjust = 0.5, size = 16, colour = "black"),
plot.background = element_rect(fill = faded_orange, colour = 'white')
))
#Calculate mean TMP for each factor level
Temperate_means_TMP <- aggregate(TMPavg_avg ~ poly_id, data = ant_data_temperate, FUN = mean) #0 = 14.09, 1 = 14.51
#Both data - without transformation
temp_caste_TMP <- ggplot(ant_data_temperate, aes(x = poly_id, y = TMPavg_avg, fill = poly_id)) +
geom_violin(fill = "red", color = "black") +
labs(title = "", x = "", y = "Temperature") +
theme_classic() +
annotate("segment", x = 0.9, xend = 1.1, y = 14.1, yend = 14.1,
color = "black", size = 0.7) +
annotate("text", x = 1, y = 14.1, label = "14.1",
color = "black", vjust = -0.3) +
annotate("segment", x = 1.9, xend = 2.1, y = 14.5, yend = 14.5,
color = "black", size = 0.7) +
annotate("text", x = 2, y = 14.5, label = "14.5",
color = "black", vjust = -0.3) +
scale_y_continuous(labels = comma_format(), expand = c(0.15, 0)) +
scale_fill_manual(values = c("white", "white")) +
guides(fill = "none") +
scale_x_discrete(labels = c("Low variation", "High variation")) +  # Set custom x-axis labels
theme(
axis.text.x = element_text(size = 12, colour = "black"),
axis.text.y = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black"),
axis.title.y = element_text(size = 12, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Temperate")
temp_caste_TMP
###
#Scatterplot instead
ggplot(ant_data_temperate, aes(x = poly_id, y = TMPavg_avg, fill = poly_id)) +
geom_point(position = position_jitterdodge(jitter.width = 0.5), size = 1.4, shape = 16, alpha = 0.15) +
labs(title = "", x = "", y = "Temperature") +
theme_classic() +
annotate("segment", x = 0.9, xend = 1.1, y = 14.1, yend = 14.1,
color = "black", size = 0.7) +
annotate("text", x = 1, y = 14.1, label = "",
color = "black", vjust = -0.3) +
annotate("segment", x = 1.9, xend = 2.1, y = 14.5, yend = 14.5,
color = "black", size = 0.7) +
annotate("text", x = 2, y = 14.5, label = "",
color = "black", vjust = -0.3) +
scale_y_continuous(labels = scales::comma_format(), expand = c(0.15, 0)) +
scale_fill_manual(values = c("white", "white")) +
guides(fill = "none") +
scale_x_discrete(labels = c("Low variation", "High variation")) +  # Set custom x-axis labels
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Temperate") +
geom_signif(xmin = as.integer(1),
xmax = as.integer(2),
y_position = 31,
annotation = "*",
tip_length = 0.05,
textsize = 5.5)
#Axes flipped
(temp_caste_TMP <- ggplot(ant_data_temperate, aes(x = TMPavg_avg, y = poly_id, color = poly_id)) +
geom_point(position = position_jitterdodge(jitter.width = 0.5), size = 1.4, shape = 16, alpha = 0.3) +
labs(title = "", x = expression("Temperature (" * degree*C * ")"), y = "") +
theme_classic() +
annotate("segment", x = 14.1, xend = 14.1, y = 0.8, yend = 1.2,
color = "black", size = 0.7) +
annotate("text", x = 14.1, y = 1, label = "",
color = "black", hjust = -0.3) +
annotate("segment", x = 14.5, xend = 14.5, y = 1.8, yend = 2.2,
color = "black", size = 0.7) +
annotate("text", x = 14.5, y = 2, label = "",
color = "black", hjust = -0.3) +
scale_x_continuous(labels = scales::comma_format(), expand = c(0.15, 0)) +
guides(colour = "none") +
scale_y_discrete(labels = c("Low variation", "High variation")) +
scale_colour_manual(values = c("#C3E6F9", "#000025")) +  # Add your desired colors here
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16, colour = "#FFD700"),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Temperate")
)
(temp_caste_TMP_col <- temp_caste_TMP + theme(
plot.title = element_text(hjust = 0.5, size = 16, colour = "black"),
plot.background = element_rect(fill = faded_yellow, colour = 'white')
))
# +
# ggtitle("Temperate") +
# geom_signif(xmin = as.integer(1),
#       xmax = as.integer(2),
#       y_position = 31,
#       annotation = "*",
#       tip_length = 0.05,
#       textsize = 5.5,
#       colour = "black"))
#Calculate mean TMP for each factor level
Both_means_TMP <- aggregate(TMPavg_avg ~ poly_id, data = ant_data_both, FUN = mean) #0 = 20.05, 1 = 20.64
#Both data - with trans
both_caste_TMP <- ggplot(ant_data_both, aes(x = poly_id, y = TMPavg_avg, fill = poly_id)) +
geom_violin(fill = "red", color = "black") +
labs(title = "", x = "", y = "Temperature") +
theme_classic() +
annotate("segment", x = 0.9, xend = 1.1, y = 20.1, yend = 20.1,
color = "black", size = 0.7) +
annotate("text", x = 1, y = 20.1, label = "20.1",
color = "black", vjust = -0.3) +
annotate("segment", x = 1.9, xend = 2.1, y = 20.6, yend = 20.6,
color = "black", size = 0.7) +
annotate("text", x = 2, y = 20.6, label = "20.6",
color = "black", vjust = -0.3) +
scale_y_continuous(labels = comma_format(), expand = c(0.15, 4)) +
scale_fill_manual(values = c("white", "white")) +
guides(fill = "none") +
scale_x_discrete(labels = c("Low variation", "High variation")) +  # Set custom x-axis labels
theme(
axis.text.x = element_text(size = 12, colour = "black"),
axis.text.y = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black"),
axis.title.y = element_text(size = 12, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Both")
both_caste_TMP
####
#Scatterplot instead
(both_caste_TMP <- ggplot(ant_data_both, aes(x = poly_id, y = TMPavg_avg, fill = poly_id)) +
geom_point(position = position_jitterdodge(jitter.width = 0.5), size = 1.4, shape = 16, alpha = 0.15) +
labs(title = "", x = "", y = "Temperature") +
theme_classic() +
annotate("segment", x = 1.175, xend = 1.425, y = 20.1, yend = 20.1,
color = "black", size = 0.7) +
annotate("text", x = 1, y = 20.1, label = "",
color = "black", vjust = -0.3) +
annotate("segment", x = 2.175, xend = 2.425, y = 20.6, yend = 20.6,
color = "black", size = 0.7) +
annotate("text", x = 2, y = 20.6, label = "",
color = "black", vjust = -0.3) +
scale_y_continuous(labels = scales::comma_format(), expand = c(0.15, 4)) +
scale_fill_manual(values = c("white", "white")) +
guides(fill = "none") +
scale_x_discrete(labels = c("Low variation", "High variation")) +  # Set custom x-axis labels
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Both") +
geom_signif(xmin = as.integer(1),
xmax = as.integer(2),
y_position = 31,
annotation = "*",
tip_length = 0.05,
textsize = 5.5)
)
#Axes flipped
(both_caste_TMP <- ggplot(ant_data_both, aes(x = TMPavg_avg, y = poly_id, color = poly_id)) +
geom_point(position = position_jitterdodge(jitter.width = 0.5), size = 1.4, shape = 16, alpha = 0.3) +
labs(title = "", x = expression("Temperature (" * degree*C * ")"), y = "") +
theme_classic() +
annotate("segment", x = 20.1, xend = 20.1, y = 0.8, yend = 1.2,
color = "black", size = 0.7) +
annotate("text", x = 20.1, y = 1, label = "",
color = "black", hjust = -0.3) +
annotate("segment", x = 20.6, xend = 20.6, y = 1.8, yend = 2.2,
color = "black", size = 0.7) +
annotate("text", x = 20.6, y = 2, label = "",
color = "black", hjust = -0.3) +
scale_x_continuous(labels = scales::comma_format(), expand = c(0.15, 0)) +
guides(colour = "none") +
scale_y_discrete(labels = c("Low variation", "High variation")) +
scale_colour_manual(values = c("#C3E6F9", "#000025")) +  # Add your desired colors here
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16, colour = "#1abc9c"),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
ggtitle("Both") +
geom_signif(xmin = as.integer(1),
xmax = as.integer(2),
y_position = 31,
annotation = "*",
tip_length = 0.05,
textsize = 5.5,
colour = "black"))
(both_caste_TMP_col <- both_caste_TMP + theme(
plot.title = element_text(hjust = 0.5, size = 16, colour = "black"),
plot.background = element_rect(fill = faded_green, colour = 'white')
))
# ggsave("/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Presentations/TEEB/2nd_TEEB_talk/Photos/both_caste_TMP.pdf", plot = both_caste_TMP, width = 6, height = 4, dpi = 300)
# Create a grid of the three smaller plots on the right
TMP_poly_small_plots_grid <- grid.arrange(tropical_caste_TMP, temp_caste_TMP, both_caste_TMP, ncol = 1)
# Arrange the larger plot and the small plots side by side
TMP_poly_panel_reg.pdf <- grid.arrange(global_caste_TMP, TMP_poly_small_plots_grid, ncol = 2, widths = c(2, 1))
TMP_poly_panel_reg.pdf
TMP_poly_panel_equal_reg.pdf <- grid.arrange(global_caste_TMP, tropical_caste_TMP, temp_caste_TMP, both_caste_TMP, ncol = 2)
# ggsave("/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Version_1/Figures/TMP_poly_panel_reg.pdf", plot = TMP_poly_panel_reg.pdf, width = 10.5, height = 6, dpi = 300)
# ggsave(filename = "/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Figures/TMP_poly_panel_equal_reg.pdf", plot = TMP_poly_panel_equal_reg.pdf, width = 10, height = 5, dpi = 300)
#Rainfall and colony size
PRE_CS_panel_equal_reg.pdf <- grid.arrange(global_CS_reg, tropical_CS_reg, temperate_CS_reg, both_CS_reg, ncol = 2)
# ggsave(filename = "/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Figures/PRE_CS_panel_equal_reg.pdf", plot = PRE_CS_panel_equal_reg.pdf, width = 8, height = 5, dpi = 300)
#Rainfall and caste
PRE_Caste_panel_equal_reg.pdf <- grid.arrange(global_caste_PRE, tropical_caste_PRE, temperate_caste_PRE, both_caste_PRE, ncol = 2)
# ggsave(filename = "/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Figures/PRE_Caste_panel_equal_reg.pdf", plot = PRE_Caste_panel_equal_reg.pdf, width = 8, height = 5, dpi = 300)
#Temperature and caste
TMP_poly_panel_equal_reg.pdf <- grid.arrange(global_caste_TMP, tropical_caste_TMP, temp_caste_TMP, both_caste_TMP, ncol = 2)
# ggsave(filename = "/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Figures/TMP_poly_panel_equal_reg.pdf", plot = TMP_poly_panel_equal_reg.pdf, width = 8, height = 5, dpi = 300)
###
#Background colour filled in
###
#Rainfall and colony size
PRE_CS_panel_equal_reg_col.pdf <- grid.arrange(global_CS_reg, tropical_CS_reg_col, temperate_CS_reg_col, both_CS_reg_col, ncol = 2)
# ggsave(filename = "/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Figures/PRE_CS_panel_equal_reg_col.pdf", plot = PRE_CS_panel_equal_reg_col.pdf, width = 8, height = 5, dpi = 300)
#Rainfall and caste
PRE_Caste_panel_equal_reg_col.pdf <- grid.arrange(global_caste_PRE, tropical_caste_PRE_col, temperate_caste_PRE_col, both_caste_PRE_col, ncol = 2)
# ggsave(filename = "/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Figures/PRE_Caste_panel_equal_reg_col.pdf", plot = PRE_Caste_panel_equal_reg_col.pdf, width = 8, height = 5, dpi = 300)
#Temperature and caste
TMP_poly_panel_equal_reg_col.pdf <- grid.arrange(global_caste_TMP, tropical_caste_TMP_col, temp_caste_TMP_col, both_caste_TMP_col, ncol = 2)
# ggsave(filename = "/Users/louis.bell-roberts/Documents/DTP_1st_project_rotation/Wordfiles/Paper drafting/AntEnv/Figures/TMP_poly_panel_equal_reg_col.pdf", plot = TMP_poly_panel_equal_reg_col.pdf, width = 8, height = 5, dpi = 300)
#Just global
TMP_PRE_poly_CS_panel_equal_reg_col.pdf <- grid.arrange(global_caste_TMP, global_caste_PRE, global_CS_reg, global_CS_TMP_reg, ncol = 2)
#Just global
TMP_PRE_poly_CS_panel_equal_reg_col.pdf <- grid.arrange(global_caste_TMP, global_caste_PRE, global_CS_TMP_reg, global_CS_reg, ncol = 2)
#Plot
# MCMC_data_selected$poly_id <- as.numeric(as.character(MCMC_data_selected$poly_id))
(global_caste_PRE <- ggplot(MCMC_data_selected, aes(x = PREavg_avg, y = poly_id, color = poly_id)) +
geom_point(size = 1.4, shape = 16, alpha = 0.3) +
labs(title = "", x = "Rainfall (mm)", y = "") +
theme_classic() +
scale_x_continuous(labels = scales::comma_format(), expand = c(0.05, 0)) +
scale_y_continuous(breaks = c(0,1), labels = c("Monomorphic", "Polymorphic")) +  # Set labels for y-axis
guides(colour = "none") +
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16, colour = "black"),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
geom_line(aes(y = predicted_poly_PRE), size = 0.8, color = "black")
)
###
#Logistic regression plot
###
ant_data_global$poly_id <- as.numeric(as.character(ant_data_global$poly_id))
#Run MCMCglmm regression model
MCMC_global_data <- ant_data_global %>% dplyr::rename(animal = valid_species_name)
prior1.1 <- list(G = list(G1 = list(V = 1, nu = 1000, alpha.mu = 0, alpha.V = 1)),
R = list(V = 1, fix = 1))
MCMC_data_selected <- MCMC_global_data %>% dplyr::select(PREavg_avg, predicted_poly_PRE, poly_id)
#Plot
# MCMC_data_selected$poly_id <- as.numeric(as.character(MCMC_data_selected$poly_id))
(global_caste_PRE <- ggplot(MCMC_data_selected, aes(x = PREavg_avg, y = poly_id, color = poly_id)) +
geom_point(size = 1.4, shape = 16, alpha = 0.3) +
labs(title = "", x = "Rainfall (mm)", y = "") +
theme_classic() +
scale_x_continuous(labels = scales::comma_format(), expand = c(0.05, 0)) +
scale_y_continuous(breaks = c(0,1), labels = c("Monomorphic", "Polymorphic")) +  # Set labels for y-axis
guides(colour = "none") +
theme(
axis.text.x = element_text(size = 14, colour = "black"),
axis.text.y = element_text(size = 14, colour = "black"),
axis.title.x = element_text(size = 14, colour = "black"),
axis.title.y = element_text(size = 14, colour = "black"),
plot.title = element_text(hjust = 0.5, size = 16, colour = "black"),
plot.margin = unit(c(1, 1, 1.5, 1), "lines")
) +
geom_line(aes(y = predicted_poly_PRE), size = 0.8, color = "black")
)
MCMC_global_data <- ant_data_global %>% dplyr::rename(animal = valid_species_name)
prior1.1 <- list(G = list(G1 = list(V = 1, nu = 1000, alpha.mu = 0, alpha.V = 1)),
R = list(V = 1, fix = 1))
#PRE global
##Run MCMCglmm regression model
model_global_caste_PRE <- MCMCglmm(poly_id ~ PREavg_avg, random = ~animal, family = "categorical", prior = prior1.1, pedigree = tree_set[[1]], data = MCMC_global_data, nitt = 110000, burnin = 10000, thin = 100, verbose = F)
summary(model_global_caste_PRE)
